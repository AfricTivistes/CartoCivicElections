---
interface Props {
  title?: string;
}

const { title } = Astro.props;
---

<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
>
  <h1
    class="block text-balance text-center text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
  >
    <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
    <Fragment set:html={title} />
  </h1>
  <div id="map" class="h-[600px] w-full rounded-lg md:mb-4"></div>
</section>

<script>
  import maplibregl from "maplibre-gl";
  import { slug } from "@/utils/slug.ts";
  import paysData from "@/utils/pays.json";

  const translateCountryName = (countryName: string, langue: string) => {
    if (langue === "en") {
      for (const [frName, data] of Object.entries(paysData)) {
        if (frName === countryName && data.en) {
          return data.en;
        }
      }
    }
    return countryName;
  };

  // Initialize the map when the component mounts
  const initMap = () => {
    const map = new maplibregl.Map({
      container: "map",
      style: {
        version: 8,
        sources: {
          osm: {
            type: "raster",
            tiles: ["https://tile.openstreetmap.org/{z}/{x}/{y}.png"],
            tileSize: 256,
            attribution: "© OpenStreetMap Contributors",
          },
        },
        layers: [
          {
            id: "osm",
            type: "raster",
            source: "osm",
            minzoom: 0,
            maxzoom: 19,
          },
        ],
      },
      center: [20, 0], // Center of Africa
      zoom: 3,
    });

    // Add navigation controls
    map.addControl(new maplibregl.NavigationControl());

    // African countries data points

    let points = {
      type: "FeatureCollection",
      features: [],
    };

    // Charger les points
    const fetchPoints = async () => {
      try {
        const response = await fetch("/api/map.json");
        if (response.ok) {
          const data = await response.json();

          // Mettre à jour la source de données une fois les points chargés
          if (map.getSource("initiatives")) {
            map.getSource("initiatives").setData(data);
          }
          return data;
        }
      } catch (error) {
        console.error("Erreur lors du chargement des points:", error);
      }
    };

    map.on("load", async () => {
      // Add the source for clusters
      map.addSource("initiatives", {
        type: "geojson",
        data: points, // Commence avec un objet vide
        cluster: true,
        clusterMaxZoom: 14,
        clusterRadius: 50,
      });

      // Charger les données après l'initialisation de la source
      const loadedPoints = await fetchPoints();

      // Add cluster layer
      map.addLayer({
        id: "clusters",
        type: "circle",
        source: "initiatives",
        filter: ["has", "point_count"],
        paint: {
          "circle-color": [
            "step",
            ["get", "point_count"],
            "#FB923C", // Primary orange color for small clusters
            10,
            "#EA580C", // Darker orange for medium clusters
            30,
            "#9A3412", // Darkest orange for large clusters
          ],
          "circle-radius": ["step", ["get", "point_count"], 20, 10, 30, 30, 40],
        },
      });

      // Add cluster count
      map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "initiatives",
        filter: ["has", "point_count"],
        layout: {
          "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
          "text-size": 12,
        },
        paint: {
          "text-color": "#ffffff",
        },
      });

      // Add unclustered point layer
      map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "initiatives",
        filter: ["!", ["has", "point_count"]],
        paint: {
          "circle-color": "#FB923C",
          "circle-radius": 8,
          "circle-stroke-width": 1,
          "circle-stroke-color": "#fff",
        },
      });

      // Create a popup for individual points
      const popup = new maplibregl.Popup({
        closeButton: true,
        closeOnClick: false,
        maxWidth: "300px",
        className: "custom-popup",
      });

      map.on("mouseenter", "unclustered-point", (e) => {
        map.getCanvas().style.cursor = "pointer";

        const coordinates = e.features[0].geometry.coordinates.slice();
        const { title, description, count, country, initiatives } =
          e.features[0].properties;

        // Créer la liste des initiatives (limiter à 5 par exemple)
        let initiativesList = "";

        // Parse les initiatives si elles sont dans un format de chaîne JSON
        let initiativesArray = initiatives;
        if (typeof initiatives === "string") {
          try {
            initiativesArray = JSON.parse(initiatives);
          } catch (e) {
            console.error("Erreur lors du parsing des initiatives:", e);
            initiativesArray = [];
          }
        }

        // Vérifier si c'est un tableau
        if (!Array.isArray(initiativesArray)) {
          initiativesArray = [];
        }

        const displayLimit = Math.min(initiativesArray.length, 5);

        // Récupérer les noms et slugs des initiatives
        const initiativesData = Array.isArray(
          e.features[0].properties.initiativesData
        )
          ? e.features[0].properties.initiativesData
          : [];

        if (initiativesArray && initiativesArray.length > 0) {
          initiativesList = '<ul class="mt-2 text-sm">';
          for (let i = 0; i < displayLimit; i++) {
            const initiativeName = initiativesArray[i];
            // Utiliser la fonction slug importée pour assurer la cohérence
            const initiativeSlug = slug(initiativeName);

            const currentPath = window.location.pathname;
            const basePath = currentPath.startsWith("/fr") ? "/fr" : "";
            const initiativeLink = `${basePath}/initiatives/${initiativeSlug}`;

            initiativesList += `<li class="my-1 flex items-start">
              <span class="mr-1">•</span>
              <a href="${initiativeLink}" class="text-orange-600 hover:underline">${initiativeName}</a>
            </li>`;
          }

          if (initiativesArray.length > displayLimit) {
            // Déterminer la langue en fonction de l'URL
            const currentLang = window.location.pathname.startsWith("/fr")
              ? "fr"
              : "en";
            const moreText =
              currentLang === "fr"
                ? `... et ${initiativesArray.length - displayLimit} autres`
                : `... and ${initiativesArray.length - displayLimit} more`;

            initiativesList += `<li>• ${moreText}</li>`;
          }

          initiativesList += "</ul>";
        }

        const currentPath = window.location.pathname;
        const basePath = currentPath.startsWith("/fr") ? "/fr" : "";
        const filterLink = `${basePath}/initiatives/?tags=${encodeURIComponent(title)}`;

        // Déterminer la langue actuelle basée sur l'URL
        const currentLang = window.location.pathname.startsWith("/fr")
          ? "fr"
          : "en";

        const countryName = translateCountryName(title, currentLang);
        console.log("Country name:", countryName);
        const viewAllText =
          currentLang === "fr"
            ? `Voir toutes les initiatives de ${countryName}`
            : `View all initiatives from ${countryName}`;
        const descriptionn =
          currentLang === "fr"
            ? `${count} initiative${count > 1 ? "s" : ""} dans ce pays`
            : `${count} initiative${count > 1 ? "s" : ""} in this country`;

        const popupContent = `
          <div class="block popup-content">
            <h3 class="font-bold text-lg">${countryName}</h3>
            <p class="text-sm">${descriptionn}</p>
            <div class="initiatives-list">
              ${initiativesList}
            </div>
            <a href="${filterLink}" class="block mt-3 text-sm text-orange-600 hover:underline">
              ${viewAllText}
            </a>
          </div>
        `;

        popup.setLngLat(coordinates).setHTML(popupContent).addTo(map);
      });

      // Modifier le comportement de mouseleave pour qu'il ne ferme pas immédiatement
      map.on("mouseleave", "unclustered-point", (e) => {
        map.getCanvas().style.cursor = "";

        // Attendre avant de fermer le popup pour permettre à l'utilisateur d'interagir avec
        setTimeout(() => {
          // Si le curseur est sur le popup, ne pas le fermer
          const popupElement = document.querySelector(".maplibregl-popup");
          if (popupElement) {
            const rect = popupElement.getBoundingClientRect();
            // Utiliser e.originalEvent pour accéder aux coordonnées de la souris
            const x = e.originalEvent?.clientX || 0;
            const y = e.originalEvent?.clientY || 0;

            // Si la souris est en dehors du popup, le fermer
            if (
              !(
                x >= rect.left &&
                x <= rect.right &&
                y >= rect.top &&
                y <= rect.bottom
              )
            ) {
              popup.remove();
            }
          }
        }, 100);
      });

      // Ajouter un gestionnaire pour le popup lui-même
      document.addEventListener("mouseover", (e) => {
        // Si la souris est sur le popup, empêcher sa fermeture
        if (e.target.closest(".maplibregl-popup")) {
          document.querySelector(".maplibregl-popup").classList.add("active");
        }
      });

      // Add click handler for unclustered points
      map.on("click", "unclustered-point", (e) => {
        const { title } = e.features[0].properties;
        const currentPath = window.location.pathname;
        const basePath = currentPath.startsWith("/fr") ? "/fr" : "";
        window.location.href = `${basePath}/initiatives/?tags=${encodeURIComponent(title)}`;
      });
    });

    // Inspect a cluster on click
    map.on("click", "clusters", (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ["clusters"],
      });
      const clusterId = features[0].properties.cluster_id;
      map
        .getSource("initiatives")
        .getClusterExpansionZoom(clusterId, (err, zoom) => {
          if (err) return;

          map.easeTo({
            center: features[0].geometry.coordinates,
            zoom: zoom,
          });
        });
    });

    // Show pointer cursor on hover
    map.on("mouseenter", "clusters", () => {
      map.getCanvas().style.cursor = "pointer";
    });
    map.on("mouseleave", "clusters", () => {
      map.getCanvas().style.cursor = "";
    });

    // Rafraîchir les données toutes les 30 secondes si nécessaire
    // setInterval(fetchPoints, 30000);
  };

  // Initialize map when component mounts
  document.addEventListener("DOMContentLoaded", initMap);
</script>

<style is:global>
  @import "maplibre-gl/dist/maplibre-gl.css";

  .custom-popup .maplibregl-popup-content {
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .custom-popup ul {
    margin-top: 8px;
    padding-left: 5px;
    list-style: none;
    border: none;
  }

  .initiatives-list {
    margin-top: 8px;
  }

  .custom-popup ul li {
    margin-bottom: 4px;
    display: flex;
    align-items: flex-start;
    border: none;
    padding: 0;
  }

  .custom-popup ul li a {
    display: inline-block;
    text-align: left;
    word-break: normal;
    overflow-wrap: anywhere;
    border: none;
    box-shadow: none;
    outline: none;
  }

  /* Supprimer l'encadrement bleu de focus sur les liens */
  .custom-popup ul li a:focus,
  .custom-popup ul li a:active,
  .custom-popup ul li a:hover {
    outline: none;
    border: none;
    box-shadow: none;
  }

  .custom-popup .maplibregl-popup-content:hover {
    cursor: default;
  }

  .custom-popup.active {
    z-index: 10;
  }

  .popup-content a {
    display: inline-block;
    transition: all 0.2s ease;
  }

  .popup-content a:hover {
    color: #ea580c;
    text-decoration: underline;
  }
</style>
