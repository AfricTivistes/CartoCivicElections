---
import { t } from "i18next";
import { getAll } from "@/lib/contentNocodb.astro";
import countryCoordinates from "@/utils/pays.json";
interface Props {
  title?: string;
}

const { title } = Astro.props;
---

<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
  <h1
    class="block text-balance text-center text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
  >
    <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
    <Fragment set:html={title} />
  </h1>
  <div class="relative w-full h-[500px] bg-gray-100 rounded-lg overflow-hidden" id="map"></div>
</section>

<script>
  import mapboxgl from 'mapbox-gl';

  // Configuration de la carte
  mapboxgl.accessToken = 'votre_token_mapbox'; // Replace with your actual Mapbox access token

  const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v11',
    center: [17.5, 14.5],
    zoom: 2.5
  });

  // Attendre que la carte soit chargée
  map.on('load', async () => {
    try {
      // Ajout de la source vide
      map.addSource('points', {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: []
        }
      });

      // Ajout de la couche pour les points
      map.addLayer({
        id: 'points',
        type: 'circle',
        source: 'points',
        paint: {
          'circle-radius': 8,
          'circle-color': '#6EC770',
          'circle-opacity': 0.8
        }
      });

      // Chargement asynchrone des points
      const response = await fetch('/api/map.json');
      const points = await response.json();

      // Mise à jour de la source avec les points chargés
      map.getSource('points').setData(points);

    } catch (error) {
      console.error('Erreur lors du chargement des points:', error);
    }
  });
</script>

<style is:global>
  import "mapbox-gl/dist/mapbox-gl.css";
</style>