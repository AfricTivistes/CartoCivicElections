// src/lib/generateInitiatives.ts
import fs from "fs";
import path from "path";
import { slug } from "@/utils/slug";
import fetch from "node-fetch";
import sharp from "sharp";
import { api } from './nocodb';

const getAll = async (tableId: string, query: object = {}) => {
  try {
    let allRecords = [];
    let page = 1;
    let hasMore = true;
    let totalRows = 0;
    const baseParams = {
      viewId: query?.viewId,
      fields: query?.fields,
      where: query?.where
    };
    
    // Premi√®re requ√™te pour obtenir le nombre total d'enregistrements
    const firstResponse = await api.get(`/api/v2/tables/${tableId}/records`, {
      params: {
        ...baseParams,
        limit: 100,
        page: 1
      }
    });
    
    const firstData = firstResponse.data as ApiResponse;
    if (!firstData.pageInfo) {
      throw new Error('Format de r√©ponse API invalide : pageInfo manquant');
    }
    
    totalRows = firstData.pageInfo.totalRows;
    allRecords = [...firstData.list];
    
    // Calcul du nombre total de pages
    const totalPages = Math.ceil(totalRows / 100);
    
    // R√©cup√©ration des pages restantes
    while (page < totalPages) {
      page++;
      
      try {
        const response = await api.get(`/api/v2/tables/${tableId}/records`, {
          params: {
            ...baseParams,
            limit: 100,
            page: page
          }
        });
        
        const data = response.data as ApiResponse;
        if (!data.list) {
          throw new Error(`Format de r√©ponse API invalide pour la page ${page}`);
        }
        
        allRecords = [...allRecords, ...data.list];
        
        // Pause courte entre les requ√™tes pour √©viter la surcharge
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`Erreur lors de la r√©cup√©ration de la page ${page}:`, error);
        throw new Error(`√âchec de la r√©cup√©ration de la page ${page}`);
      }
    }
    
    return {
      list: allRecords,
      total: allRecords.length,
      pageInfo: {
        totalRows,
        totalPages,
        pageSize: 100
      }
    };
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de toutes les donn√©es:', error);
    throw error;
  }
};

/**
 * T√©l√©charge et optimise une image depuis une URL
 * @param imageUrl URL de l'image √† t√©l√©charger
 * @param initiativeSlug Slug de l'initiative pour nommer le fichier
 * @returns Chemin local de l'image optimis√©e ou null en cas d'erreur
 */
async function downloadAndOptimizeImage(
  imageUrl: string,
  initiativeSlug: string,
): Promise<string | null> {
  try {
    const imageDir = path.join(process.cwd(), "public", "initiatives");
    if (!fs.existsSync(imageDir)) {
      fs.mkdirSync(imageDir, { recursive: true });
    }

    const fileName = `${initiativeSlug}.webp`;
    const filePath = path.join(imageDir, fileName);

    if (fs.existsSync(filePath)) {
      return `/initiatives/${fileName}`;
    }

    const response = await fetch(imageUrl);
    if (!response.ok) {
      console.error(
        `Erreur lors du t√©l√©chargement de l'image: ${response.statusText}`,
      );
      return null;
    }

    // Obtenir les donn√©es de l'image
    const imageBuffer = await response.buffer();

    // Optimiser l'image avec sharp
    await sharp(imageBuffer)
      .resize(800) 
      .webp({ quality: 80 }) 
      .toFile(filePath);

    return `/initiatives/${fileName}`;
  } catch (error) {
    console.error(`Erreur lors du traitement de l'image: ${error}`);
    return null;
  }
}

/**
 * Supprime l'ancien fichier d'initiatives s'il existe
 * @param filePath Chemin du fichier √† supprimer
 */
async function removeOldInitiativesFile(filePath: string) {
  if (fs.existsSync(filePath)) {
    console.log("üóëÔ∏è Suppression de l'ancien fichier initiatives.json...");
    fs.unlinkSync(filePath);
  }
}

/**
 * Enregistre les initiatives dans un fichier JSON
 * @param initiatives Donn√©es des initiatives √† sauvegarder
 * @param filePath Chemin du fichier o√π sauvegarder les donn√©es
 */
async function saveInitiativesToFile(initiatives: any, filePath: string) {
  const dirPath = path.dirname(filePath);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }

  fs.writeFileSync(filePath, JSON.stringify(initiatives, null, 2), "utf8");
  console.log(`‚úÖ ${initiatives.length} initiatives sauvegard√©es dans ${filePath}`);
}

/**
 * Enregistre les d√©tails de l'initiative dans un fichier JSON
 * @param {object} initiative Donn√©es de l'initiative √† sauvegarder
 * @param {string} language Langue de l'initiative (fr ou en)
 * @param {string} initiativeSlug Slug de l'initiative pour le nom du fichier
 */
async function saveInitiativeDetails(initiative: any, language: string, initiativeSlug: string) {
  const detailsDir = path.join(process.cwd(), "public/details");
  if (!fs.existsSync(detailsDir)) {
    fs.mkdirSync(detailsDir);
  }
  const jsonFilePath = path.join(detailsDir, `${language}-${initiativeSlug}.json`);
  fs.writeFileSync(jsonFilePath, JSON.stringify(initiative, null, 2), "utf8")
}

/**
 * R√©cup√®re les initiatives depuis l'API NocoDB
 * @returns Un objet contenant la liste des initiatives, ou null en cas d'erreur
 */
async function fetchInitiatives() {
  console.log("üîÑ R√©cup√©ration des initiatives depuis l'API...");
  const tableId = "m9erh9bplb8jihp";
  const query = {
    viewId: "vwdobxvm00ayso6s",
    fields: [
      "Langue", "Type d'organisation", "Nom de l'initiative", "R√©sum√© descriptif de l'initiative",
      "Pays", "Th√©matique de l'initiative", "Quels √©taient les principaux objectifs de cette initiative citoyenne",
      "Cat√©gorie de l'initiative", "Site web de l'initiative", "Type d'√©lection", "Date de d√©but",
      "Date de fin", "L‚Äôinitiative a-t-elle √©t√© soutenue par des partenaires ?", "Si OUI, quels √©taient les principaux partenaires",
      "Zone d'intervention des partenaires", "Quel a √©t√© leur apport", "Cibles de l‚Äôinitiative", "zone g√©ographique couverte par l'initiative",
      "Pays de mise en oeuvre", "Avez-vous constat√© des dysfonctionnements majeurs dans le processus √©lectoral ?",
      "Si oui, quelle √©tait la nature des dysfonctionnements", "Si oui, les avez-vous port√©s √† la connaissance des autorit√©s comp√©tentes pour rectification",
      "Quelle suite a √©t√© r√©serv√©e √† votre signalement", "Les dysfonctionnements ont-ils affect√© l'atteinte des objectifs de l'initiative",
      "Les initiatives citoyennes √©lectorales b√©n√©ficient-elles d'un environnement l√©gal favorable dans votre contexte",
      "difficult√©s avec les pouvoirs publics dans la r√©alisation de vos activit√©s", "Est-ce-une initiative √† plusieurs composantes1",
      "Voulez-vous soumettre une autre composante de votre initiative", "Phases", "Facebook", "X", "Linkedin",
      "Ressources", "Obligation de reconnaissance institutionnelle de l'initiative",
      "Appr√©ciation de la transparence du processus √©lectoral", "image-logo"
    ],
    where: `(Status,eq,Traiter)`,
  };

  try {
    const productEntries = await getAll(tableId, query);
    if (!productEntries?.list) {
      console.error("‚ùå Aucune initiative trouv√©e !");
      return null;
    }

    console.log(`‚úÖ ${productEntries.list.length} initiatives r√©cup√©r√©es.`);
    return productEntries;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des initiatives: ${error}`);
    return null;
  }
}

/**
 * Fonction principale qui g√®re la g√©n√©ration du fichier d'initiatives
 */
export async function generateInitiativesJson() {
  console.log("üöÄ D√©marrage de la g√©n√©ration des initiatives...");
  
  // D√©finir le chemin du fichier d'initiatives JSON
  const filePath = path.join(process.cwd(), "src/content/initiatives/initiatives.json");
  
  // Supprimer l'ancien fichier d'initiatives
  await removeOldInitiativesFile(filePath);
  
  // R√©cup√©rer les initiatives depuis l'API
  const productEntries = await fetchInitiatives();
  if (!productEntries) {
    console.error("‚ùå Impossible de continuer sans donn√©es d'initiatives.");
    return;
  }
  
  // Traiter les donn√©es et optimiser les images
  const initiatives = [];
  
  for (const product of productEntries.list) {
    const initiativeName = product["Nom de l'initiative"] || "Initiative sans nom";
    const productSlug = slug(initiativeName);
    const localImagePath = `/initiatives/${productSlug}.webp`;
    const publicPath = path.join(process.cwd(), "public", "initiatives", `${productSlug}.webp`);
    let logoPath = fs.existsSync(publicPath) ? localImagePath : null;
    
    if (!logoPath && product["image-logo"] && product["image-logo"][0]?.signedUrl) {
      try {
        logoPath = await downloadAndOptimizeImage(product["image-logo"][0].signedUrl, productSlug);
      } catch (error) {
        console.error(`Erreur lors du traitement de l'image pour ${initiativeName}: ${error}`);
        logoPath = null;
      }
    }
    
    const formattedInitiative = {
      params: { slug: productSlug },
      props: {
        product: {
          slug: productSlug,
          title: product["Nom de l'initiative"] || "Nom non sp√©cifi√©",
          country: product["Pays"] || "Pays non sp√©cifi√©",
          langue: product["Langue"] || "Langue non sp√©cifi√©e",
          typeOrganisation: product["Type d'organisation"] || "Organisation non sp√©cifi√©e",
          category: product["Cat√©gorie de l'initiative"] || "Non cat√©goris√©",
          thematic: product["Th√©matique de l'initiative"] || "Non sp√©cifi√©",
          description: product["R√©sum√© descriptif de l'initiative"] || "Description non disponible",
          objectives: product["Quels √©taient les principaux objectifs de cette initiative citoyenne"] || "Non sp√©cifi√©",
          website: product["Site web de l'initiative"] || "Non sp√©cifi√©",
          electionType: product["Type d'√©lection"] || "Non sp√©cifi√©",
          startDate: product["Date de d√©but"] || "Non sp√©cifi√©",
          endDate: product["Date de fin"] || "Non sp√©cifi√©",
          
          partners: product["L'initiative a-t-elle √©t√© soutenue par des partenaires ?"] || "Non sp√©cifi√©",
          mainPartners: product["Si OUI, quels √©taient les principaux partenaires"] || "Non sp√©cifi√©",
          partnersContribution: product["Quel a √©t√© leur apport"] || "Non sp√©cifi√©",
          partnerZone: product["Zone d'intervention des partenaires"] || "Non sp√©cifi√©",
          
          targetAudience: product["Cibles de l'initiative"] || "Non sp√©cifi√©",
          interventionZone: product["zone g√©ographique couverte par l'initiative"] || "Non sp√©cifi√©",
          paysMiseOeuvre: product["Pays de mise en oeuvre"] || "Non sp√©cifi√©",
          
          electionProcessIssues: product["Avez-vous constat√© des dysfonctionnements majeurs dans le processus √©lectoral ?"] || "Non",
          electionIssuesNature: product["Si oui, quelle √©tait la nature des dysfonctionnements"] || "Non sp√©cifi√©",
          reportedIssues: product["Si oui, les avez-vous port√©s √† la connaissance des autorit√©s comp√©tentes pour rectification"] || "Non sp√©cifi√©",
          reportOutcome: product["Quelle suite a √©t√© r√©serv√©e √† votre signalement"] || "Non sp√©cifi√©",
          impactDysfunctions: product["Les dysfonctionnements ont-ils affect√© l'atteinte des objectifs de l'initiative"] || "Non sp√©cifi√©",
          
          legalEnvironment: product["Les initiatives citoyennes √©lectorales b√©n√©ficient-elles d'un environnement l√©gal favorable dans votre contexte"] || "Non sp√©cifi√©",
          publicAuthoritiesDifficulties: product["difficult√©s avec les pouvoirs publics dans la r√©alisation de vos activit√©s"] || "Non sp√©cifi√©",
          transparencyAssessment: product["Appr√©ciation de la transparence du processus √©lectoral"] || "Non sp√©cifi√©",
          obligationRecognition: product["Obligation de reconnaissance institutionnelle de l'initiative"] || "Non sp√©cifi√©",
          isMultiComponent: product["Est-ce-une initiative √† plusieurs composantes1"] || "Non sp√©cifi√©",
          submitAnotherComponent: product["Voulez-vous soumettre une autre composante de votre initiative"] || "Non sp√©cifi√©",
          
          phases: product["Phases"] || "Non sp√©cifi√©",
          initiativeType: product["Type d'initiative"] || "Non sp√©cifi√©",
          initiativeStatus: product["Statut de l'initiative"] || "Non sp√©cifi√©",
          
          resources: Array.isArray(product.Ressources) ? product.Ressources.map((resource: any) => resource.signedUrl) : [],
          
          socialLinks: {
            facebook: product["Facebook"] || "Non sp√©cifi√©",
            twitter: product["X"] || "Non sp√©cifi√©",
            linkedin: product["Linkedin"] || "Non sp√©cifi√©",
          },
          
          logo: logoPath || "Non sp√©cifi√©",
        },
      },
    };

    await saveInitiativeDetails(
      formattedInitiative, 
      product["Langue"], 
      slug(product["Nom de l'initiative"])
    );
    
    initiatives.push(formattedInitiative);
  }
    
  
  // Sauvegarder les initiatives dans le fichier
  await saveInitiativesToFile(initiatives, filePath);
  
  console.log("‚ú® G√©n√©ration des initiatives termin√©e avec succ√®s !");
  return initiatives;
}

// Si le script est ex√©cut√© directement (pas import√©)
generateInitiativesJson().catch(err => {
  console.error("‚ùå Erreur fatale lors de la g√©n√©ration des initiatives:", err);
  process.exit(1);
});