---
import { api } from './api/nocodb';

interface PageInfo {
  totalRows: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

interface ApiResponse {
  list: any[];
  pageInfo: PageInfo;
}

export const getData = async (tableId: string, query: object = {}) => {
  try {
    const response = await api.get(`/api/v2/tables/${tableId}/records`, { params: query });
    return response.data;
  } catch (error) {
    console.error('Error fetching data:', error);
    throw error;
  }
};

export const getAll = async (tableId: string, query: object = {}) => {
  try {
    let allRecords = [];
    let page = 1;
    let hasMore = true;
    let totalRows = 0;
    const baseParams = {
      viewId: query?.viewId,
      fields: query?.fields,
      where: query?.where
    };
    
    // Fonction pour pause avec délai exponentiel
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    const retryWithBackoff = async (fn, maxRetries = 5) => {
      let retries = 0;
      while (retries < maxRetries) {
        try {
          return await fn();
        } catch (error) {
          if (error.response && error.response.status === 429) {
            // Délai exponentiel: 500ms, 1000ms, 2000ms, 4000ms, 8000ms
            const delay = Math.min(500 * Math.pow(2, retries), 8000);
            console.warn(`Limite de requêtes atteinte, nouvelle tentative dans ${delay}ms...`);
            await sleep(delay);
            retries++;
          } else {
            throw error;
          }
        }
      }
      throw new Error(`Échec après ${maxRetries} tentatives`);
    };
    
    // Première requête pour obtenir le nombre total d'enregistrements
    const firstResponse = await retryWithBackoff(() => api.get(`/api/v2/tables/${tableId}/records`, {
      params: {
        ...baseParams,
        limit: 100,
        page: 1
      }
    }));
    
    const firstData = firstResponse.data as ApiResponse;
    if (!firstData.pageInfo) {
      throw new Error('Format de réponse API invalide : pageInfo manquant');
    }
    
    totalRows = firstData.pageInfo.totalRows;
    allRecords = [...firstData.list];
    
    // Calcul du nombre total de pages
    const totalPages = Math.ceil(totalRows / 100);
    
    // Récupération des pages restantes
    while (page < totalPages) {
      page++;
      
      try {
        // Ajouter un délai pour respecter les limites de l'API (5 requêtes/sec)
        await sleep(250); // Une requête toutes les 250ms = max 4 requêtes/sec
        
        const response = await retryWithBackoff(() => api.get(`/api/v2/tables/${tableId}/records`, {
          params: {
            ...baseParams,
            limit: 100,
            page: page
          }
        }));
        
        const data = response.data as ApiResponse;
        if (!data.list) {
          throw new Error(`Format de réponse API invalide pour la page ${page}`);
        }
        
        allRecords = [...allRecords, ...data.list];
        
      } catch (error) {
        console.error(`Erreur lors de la récupération de la page ${page}:`, error);
        throw new Error(`Échec de la récupération de la page ${page}`);
      }
    }
    
    return {
      list: allRecords,
      total: allRecords.length,
      pageInfo: {
        totalRows,
        totalPages,
        pageSize: 100
      }
    };
    
  } catch (error) {
    console.error('Erreur lors de la récupération de toutes les données:', error);
    throw error;
  }
};

---
